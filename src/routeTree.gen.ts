/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as PetsPetIdRouteImport } from './routes/pets.$petId'
import { ServerRoute as ApiUsersServerRouteImport } from './routes/api/users'
import { ServerRoute as ApiPetsServerRouteImport } from './routes/api/pets'
import { ServerRoute as ApiPetsPetIdServerRouteImport } from './routes/api/pets.$petId'

const rootServerRouteImport = createServerRootRoute()

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const PetsPetIdRoute = PetsPetIdRouteImport.update({
  id: '/pets/$petId',
  path: '/pets/$petId',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiUsersServerRoute = ApiUsersServerRouteImport.update({
  id: '/api/users',
  path: '/api/users',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiPetsServerRoute = ApiPetsServerRouteImport.update({
  id: '/api/pets',
  path: '/api/pets',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiPetsPetIdServerRoute = ApiPetsPetIdServerRouteImport.update({
  id: '/$petId',
  path: '/$petId',
  getParentRoute: () => ApiPetsServerRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/pets/$petId': typeof PetsPetIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/pets/$petId': typeof PetsPetIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/pets/$petId': typeof PetsPetIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/pets/$petId'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/pets/$petId'
  id: '__root__' | '/' | '/pets/$petId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  PetsPetIdRoute: typeof PetsPetIdRoute
}
export interface FileServerRoutesByFullPath {
  '/api/pets': typeof ApiPetsServerRouteWithChildren
  '/api/users': typeof ApiUsersServerRoute
  '/api/pets/$petId': typeof ApiPetsPetIdServerRoute
}
export interface FileServerRoutesByTo {
  '/api/pets': typeof ApiPetsServerRouteWithChildren
  '/api/users': typeof ApiUsersServerRoute
  '/api/pets/$petId': typeof ApiPetsPetIdServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/pets': typeof ApiPetsServerRouteWithChildren
  '/api/users': typeof ApiUsersServerRoute
  '/api/pets/$petId': typeof ApiPetsPetIdServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/pets' | '/api/users' | '/api/pets/$petId'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/pets' | '/api/users' | '/api/pets/$petId'
  id: '__root__' | '/api/pets' | '/api/users' | '/api/pets/$petId'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiPetsServerRoute: typeof ApiPetsServerRouteWithChildren
  ApiUsersServerRoute: typeof ApiUsersServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/pets/$petId': {
      id: '/pets/$petId'
      path: '/pets/$petId'
      fullPath: '/pets/$petId'
      preLoaderRoute: typeof PetsPetIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/users': {
      id: '/api/users'
      path: '/api/users'
      fullPath: '/api/users'
      preLoaderRoute: typeof ApiUsersServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/pets': {
      id: '/api/pets'
      path: '/api/pets'
      fullPath: '/api/pets'
      preLoaderRoute: typeof ApiPetsServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/pets/$petId': {
      id: '/api/pets/$petId'
      path: '/$petId'
      fullPath: '/api/pets/$petId'
      preLoaderRoute: typeof ApiPetsPetIdServerRouteImport
      parentRoute: typeof ApiPetsServerRoute
    }
  }
}

interface ApiPetsServerRouteChildren {
  ApiPetsPetIdServerRoute: typeof ApiPetsPetIdServerRoute
}

const ApiPetsServerRouteChildren: ApiPetsServerRouteChildren = {
  ApiPetsPetIdServerRoute: ApiPetsPetIdServerRoute,
}

const ApiPetsServerRouteWithChildren = ApiPetsServerRoute._addFileChildren(
  ApiPetsServerRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  PetsPetIdRoute: PetsPetIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiPetsServerRoute: ApiPetsServerRouteWithChildren,
  ApiUsersServerRoute: ApiUsersServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
